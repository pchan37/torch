include("lib.tis");
include("window.tis");

namespace search {

    var clearingQueue = false;
    var resultQueue = [];

    function installSearchFeature() {
        var input = self.select("input");
        var sendDataFunc = function() {
            self.timer(0ms, sendDataFunc);           
            stdout.println("Received", input.value); 
            stdout.println("Sending...");            
            sendData(input.value);                   
        }
        input.onValueChanged = function() {
            self.timer(200ms, sendDataFunc);
        };
    }

    function sendData(data) {
        view.query(data);
    }

    function addToQueue(searchedText, displayText, iconPath) {
        if (clearingQueue) {
            return;
        }
        stdout.println("Pushing value:", displayText);
        resultQueue.push([searchedText, displayText, iconPath]);
        displayData();
        window.resizeAfterSearch();
    }

    function displayData() {
        var searchResultList = self.select("ul");
        searchResultList.style.set {             
            max-height: window.SEARCH_RESULT_HEIGHT;    
        }                                        
        while (resultQueue.length != 0) {        
           if (clearingQueue) {                 
              break;                           
           }                                    
           var searchTermAndMetaData = resultQueue.shift();      
           var liElement = new Element("li");   
           searchResultList.append(liElement);  
           if (searchTermAndMetaData[2] == "") {
               liElement.append(getSpanElementWithIcon("resources/img/empty.png"));
           } else if (searchTermAndMetaData[2].endsWith(".png") || searchTermAndMetaData[2].endsWith(".svg")) {
               liElement.append(getSpanElementWithIcon(searchTermAndMetaData[2]));
           } else {
               liElement.append(getSpanElementWithIconClass(searchTermAndMetaData[2]));
           }
           liElement.html += lib.$html( { searchTermAndMetaData[1] });
           liElement.attributes["data-search-term"] = searchTermAndMetaData[0];
        }                                        
    }

    function clearQueueAndSearchResult() {
        clearingQueue = true;                    
        resultQueue = [];                        
        var searchResultList = self.select("ul");
        searchResultList.detach();               
        var body = self.select("body");          
        var ul = new Element("ul");              
        body.append(ul);                         
        clearingQueue = false;                   
        window.resizeAfterClear();
        stdout.println("Cleared!");              
    }

    function getSpanElementWithIcon(iconPath) {
        var spanElement = new Element("span");
        spanElement.attributes["style"] = String.$(background-image: url("{ iconPath }"););
        spanElement.attributes.addClass("fiv-viv");
        return spanElement;
    }

    function getSpanElementWithIconClass(iconClass) {
        var spanElement = new Element("span");
        spanElement.attributes.addClass(iconClass);
        return spanElement;
    }

}
